const { sum, subtract } = require('../math');

// describe - группування тестів
describe('Тести для функції sum', () => {
  /*
  test - функція тесту приймає 3 аргументи:
    description - опис тесту
    callback - коллбек, у якому будемо виконувати сам тест
    timeout - час у мілісеккундах за який тест має виконатись
*/
  test('Додаємо 5 до 5, очікуємо результатом 10', () => {
    // const res = sum(5,5);
    // expect(res)
    // expect - даємо певне значення, яке ми хочемо перевірити
    //
    expect(sum(5, 5)).toBe(10);
  });

  // test('Додаємо число 5 та рядок 5, результатом 10', () => {
  //   expect(sum(5, '5')).toBe(10);
  // });

  test('Додаємо 0.1 та 0.2 очікуємо результатом 0.3', () => {
    // expect(sum(0.1, 0.2)).toBe(0.3);
    expect(sum(0.1, 0.2)).toBeCloseTo(0.3);
  });

  test('Додаємо 2 + 2, очікємо що результат не буде дорівнюувати 5', () => {
    expect(sum(2, 2)).not.toBe(5);
  });

  test('Очікуємо що функція буде кидати помилку, якщо дати некорректні числа', () => {
    // expect(() => sum(null, 7)).toThrow();
    expect(() => sum(null, 7)).toThrow(TypeError);
  });
});

describe('Тести для функції subtract', () => {
  test('Розраховуємо 5 - 4,  очікуємо 1', () => {
    expect(subtract(5, 4)).toBe(1);
  });
});

// TDD - Test Driven Development (розробка, що керується тестами) - стиль написання коду
// коли ви розпочинаєти з написання тестів на ваші осонвні ситації а вже потім пишете код
// який цим тестам задовільняє
